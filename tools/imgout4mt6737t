#!/bin/bash

### 若某一个命令返回非零值就退出
set -e

### color red
function show_vir()
{
    if [ "$1"  ]
    then
        echo
        for ret in "$@"; do
            echo -e -n "\e[1;31m$ret \e[0m"
        done
        echo
        echo
    fi
}

### color purple
function show_vip()
{
    if [ "$1"  ]
    then
        echo
        for ret in "$@"; do
            echo -e -n "\e[1;35m$ret \e[0m"
        done
        echo
        echo
    fi
}

## 错误信息
function __err()
{
    local msg=$1

    if [ $# -eq 1 ];then
        :
    else
        __echo "e.g : __err xxx"
    fi

    if [ "$msg" ];then
        show_vir "$msg"
    else
        show_vir "msg is null, please check it !"
    fi
}

CURRPATH=`pwd`

function copy_otapackage()
{
    if [ $# != 2 ] || [ ! -d $1 ]; then
        echo echo "usage: ${FUNCNAME[0]} <image out dir> <target name>"
        return 255
    fi
    local imgout_dir=$1
    local target_name=$2
    local target_config=$(cat out/target/product/${target_name}/previous_build_config.mk | grep ^PREVIOUS_BUILD_CONFIG | awk '{print $3}' | awk -F '-' '{print $1}')
    local otapackage_zip=$(ls -lt out/target/product/${target_name}/${target_config}-ota*.zip | tail -1 | awk '{print $NF}')

    if [ -f "${otapackage_zip}" ]; then
        local build_version=$(cat out/target/product/${target_name}/system/build.prop | grep ^ro.yunos.build.version | awk -F '=' '{print $2}')
        if [ -z ${build_version} ]; then
            build_version=$(cat out/target/product/${target_name}/system/build.prop | grep ^ro.build.version.incremental | awk -F '=' '{print $2}')
        fi
        cp -f ${otapackage_zip} ${imgout_dir}/ota-${build_version}.zip

        show_vip "--> copy ota file successful ..."
    else
        __err "--> ota don't exist ..."
    fi
}

function copy_target_files()
{
    if [ $# != 2 ] || [ ! -d $1 ]; then
        echo echo "usage: ${FUNCNAME[0]} <image out dir> <target name>"
        return 255
    fi
    local imgout_dir=$1
    local target_name=$2
    local target_files_zip=$(ls -lt out/target/product/${target_name}/obj/PACKAGING/target_files_intermediates/*-target_files-*.zip | tail -1 | awk '{print $NF}')

    if [ -f "${target_files_zip}" ]; then
        cp -vf ${target_files_zip} ${imgout_dir}/target_files.zip
        zip -q -d ${imgout_dir}/target_files.zip uboot.img SYSTEM/* RESIDENTFLASH/* /DATA* /IMAGES*

        show_vip "--> copy ota target file successful ..."
    else
        __err "--> ota target file don't exist ..."
    fi
}

function copy_ota_tools()
{
    if [ $# != 1 ] || [ ! -d $1 ]; then
        echo echo "usage: ${FUNCNAME[0]} <image out dir>"
        return 255
    fi
    local imgout_dir=$1

    cp -f aliyunos/build/tools/ota_from_images ${imgout_dir}/

    local host_tools=${imgout_dir}/otatools/linux-x86
    local release_tools=${imgout_dir}/otatools/releasetools
    local extensions_tools=${imgout_dir}/otatools/tool_extensions

    mkdir -p ${host_tools}/bin
    mkdir -p ${host_tools}/framework
    mkdir -p ${host_tools}/lib
    mkdir -p ${host_tools}/lib64
    mkdir -p ${release_tools}
    mkdir -p ${extensions_tools}


    cp -f out/host/linux-x86/bin/acp ${host_tools}/bin/
    cp -f out/host/linux-x86/bin/bsdiff ${host_tools}/bin/
    cp -f out/host/linux-x86/bin/e2fsck ${host_tools}/bin/
    cp -f out/host/linux-x86/bin/imgdiff ${host_tools}/bin/
    cp -f out/host/linux-x86/bin/make_ext4fs ${host_tools}/bin/
    cp -f out/host/linux-x86/bin/minigzip ${host_tools}/bin/
    cp -f out/host/linux-x86/bin/mkbootfs ${host_tools}/bin/
    cp -f out/host/linux-x86/bin/mkbootimg ${host_tools}/bin/
#   cp -f out/host/linux-x86/bin/mkimage ${host_tools}/bin/
    cp -f out/host/linux-x86/bin/mkuserimg.sh ${host_tools}/bin/
    cp -f out/host/linux-x86/bin/simg2img ${host_tools}/bin/
#   cp -f out/host/linux-x86/lib/libext2*.so ${host_tools}/lib/
    cp -f out/host/linux-x86/lib64/libext2*.so ${host_tools}/lib64/
    cp -f out/host/linux-x86/lib/libc++.so ${host_tools}/lib/
    cp -f out/host/linux-x86/lib64/libc++.so ${host_tools}/lib64/
    cp -f out/host/linux-x86/framework/signapk.jar ${host_tools}/framework/
    cp -f out/host/linux-x86/framework/dumpkey.jar ${host_tools}/framework/

    cp -f build/tools/releasetools/* ${release_tools}/

    # if releasetools.py exist, copy it to tool_extensions
    if [ -f device/alibaba/common/releasetools.py ]; then
        cp -f device/alibaba/common/releasetools.py ${extensions_tools}/
    fi
    if [ -n "`ls device/mediatek/build/releasetools`" ]; then
        cp -f device/mediatek/build/releasetools/* ${extensions_tools}/
    fi

    cd ${imgout_dir}
    zip -rq otatools.zip otatools/*
    rm -rf otatools
    cd - > /dev/null
}

function copy_images()
{
    if [ $# != 1 ]; then
        echo "usage: ${FUNCNAME[0]} <target product name>"
        return 1
    fi
    local target_product=$1
    local images_dir=release-${target_product}

    if [ ! -d out/target/product/${target_product} ]; then
        show_vir "ERROR: out/target/product/${target_product} not exist"
        return 1
    fi

    if [ ! -f device/alibaba/${target_product}/full_${target_product}.mk ]; then
        show_vir "ERROR: device/alibaba/${target_product}/full_${target_product}.mk not exist"
        return 1
    fi

    mtk_platform=`awk -F '[ =]' '$1 == "MTK_PLATFORM"' device/alibaba/${target_product}/ProjectConfig.mk | awk -F '=' '{print $2}' | awk '{print $1}'`
    mtk_platform_lc=`echo ${mtk_platform} | tr A-Z a-z`

    base_project=`awk -F '[ =]' '$1 == "MTK_BASE_PROJECT"' device/alibaba/${target_product}/full_${target_product}.mk | awk -F '=' '{print $2}' | awk '{print $1}'`
    preloader_target_product=`awk -F '[ =]' '$1 == "PRELOADER_TARGET_PRODUCT"' device/alibaba/${target_product}/full_${target_product}.mk | awk -F '=' '{print $2}' | awk '{print $1}'`

    if [ ${base_project} = "" ] || [ ${base_project} = "\$(MTK_TARGET_PROJECT)" ]; then
        base_project=${target_product}
    fi

    echo "copy ${target_product} images to ${images_dir}"
    rm -rf ${images_dir}
    mkdir ${images_dir}

    cp -f out/target/product/${target_product}/*.bin ${images_dir}
    cp -f out/target/product/${target_product}/*.img ${images_dir}
    rm ${images_dir}/ramdisk*.img
    rm ${images_dir}/*verified.img
    rm ${images_dir}/*verified.bin

    # for 4.3 or higher
    if [ -f out/target/product/${target_product}/root/file_contexts ]; then
        cp -vf out/target/product/${target_product}/root/file_contexts ${images_dir}
    fi

    # for MTK secure boot unsigned image
    if [ -f out/target/product/${target_product}/obj/PTGEN/partition_size.mk ]; then
        cp -vf out/target/product/${target_product}/obj/PTGEN/partition_size.mk ${images_dir}
    fi
    if [ -f out/target/product/${target_product}/trustzone/bin/${mtk_platform_lc}_atf_*_pad.img ]; then
        cp -vf out/target/product/${target_product}/trustzone/bin/${mtk_platform_lc}_atf_*_pad.img ${images_dir}/${mtk_platform_lc}_atf_raw.img
    fi
    if [ -f out/target/product/${target_product}/trustzone/bin/${mtk_platform_lc}_tee_*_raw.img ]; then
        cp -vf out/target/product/${target_product}/trustzone/bin/${mtk_platform_lc}_tee_*_raw.img ${images_dir}/${mtk_platform_lc}_tee_raw.img
    fi
    if [ -f  out/target/product/${target_product}/obj/PRELOADER_OBJ/bin/preloader_${preloader_target_product}_LINKED.bin ]; then
        cp -vf out/target/product/${target_product}/obj/PRELOADER_OBJ/bin/preloader_${preloader_target_product}_LINKED.bin ${images_dir}/preloader_project_LINKED.bin
    fi
    if [ -f out/target/product/${target_product}/obj/PRELOADER_OBJ/bin/preloader_${preloader_target_product}.elf ]; then
        cp -vf out/target/product/${target_product}/obj/PRELOADER_OBJ/bin/preloader_${preloader_target_product}.elf ${images_dir}/preloader_project.elf
    fi
    if [ -f vendor/mediatek/proprietary/trustzone/custom/build/project/${base_project}.mk ]; then
        cp -vf vendor/mediatek/proprietary/trustzone/custom/build/project/${base_project}.mk ${images_dir}/project.mk
    elif [ -f vendor/mediatek/proprietary/trustzone/custom/build/project/${target_product}.mk ]; then
        cp -vf vendor/mediatek/proprietary/trustzone/custom/build/project/${target_product}.mk ${images_dir}/project.mk
    fi
    # for YUNOS TEE
    if [ -f device/alibaba/${target_product}/device.mk ]; then
        cp -vf device/alibaba/${target_product}/device.mk ${images_dir}
    fi

    # for MTK
    if [ -n "`ls out/target/product/${target_product}/MT*.txt`" ]; then
        cp -vf out/target/product/${target_product}/MT*.txt ${images_dir}
    fi
    if [ -f out/target/product/${target_product}/ota_scatter.txt ]; then
        cp -vf out/target/product/${target_product}/ota_scatter.txt ${images_dir}
    elif [ -f mediatek/misc/ota_scatter.txt ]; then
        cp -vf mediatek/misc/ota_scatter.txt ${images_dir}
    fi

    #if [ -n "`ls out/target/product/${target_product}/EBR*`" ]; then
    #    cp -vf out/target/product/${target_product}/EBR* ${images_dir}
    #fi

    if [ -f out/target/product/${target_product}/MBR ]; then
        cp -vf out/target/product/${target_product}/MBR ${images_dir}
    fi

    if [ -n "`ls out/target/product/${target_product}/obj/ETC/MDDB*_intermediates/MDDB*`" ]; then
        cp -vf out/target/product/${target_product}/obj/ETC/MDDB*_intermediates/MDDB* ${images_dir}
    fi

    if [ -n "`ls out/target/product/${target_product}/obj/ETC/DbgInfo*_intermediates/DbgInfo*`" ]; then
        cp -vf out/target/product/${target_product}/obj/ETC/DbgInfo*_intermediates/DbgInfo* ${images_dir}
    fi

    if [ -n "`ls out/target/product/${target_product}/system/etc/mddb/BPLGUInfoCustomAppSrcP*`" ]; then
        cp -vf out/target/product/${target_product}/system/etc/mddb/BPLGUInfoCustomAppSrcP* ${images_dir}
    fi

    if [ -n "`ls out/target/product/${target_product}/obj/CGEN/APDB*`" ]; then
        cp -vf out/target/product/${target_product}/obj/CGEN/APDB* ${images_dir}
    fi

    # for exynos
    if [ -f out/target/product/${target_product}/zImage ]; then
        cp -vf out/target/product/${target_product}/zImage ${images_dir}
    fi

    # for vmlinux
    if [ -f out/target/product/${target_product}/obj/KERNEL_OBJ/vmlinux ]; then
        cp -vf out/target/product/${target_product}/obj/KERNEL_OBJ/vmlinux ${images_dir}
    fi

    # for secure boot check
    if [ -f vendor/mediatek/proprietary/bootable/bootloader/preloader/custom/${preloader_target_product}/${preloader_target_product}.mk ]; then
        cp -vf vendor/mediatek/proprietary/bootable/bootloader/preloader/custom/${preloader_target_product}/${preloader_target_product}.mk ${images_dir}
    fi

    if [ -f out/target/product/${target_product}/obj/ETC/sepolicy_intermediates/policy.conf ]; then
        cp -vf out/target/product/${target_product}/obj/ETC/sepolicy_intermediates/policy.conf ${images_dir}
    fi

    if [ -d out/target/product/${target_product}/obj/PRELOADER_OBJ ] && [ -d out/target/product/${target_product}/obj/BOOTLOADER_OBJ ]; then
        cp -rf out/target/product/${target_product}/obj/PRELOADER_OBJ ${images_dir}
        cp -rf out/target/product/${target_product}/obj/BOOTLOADER_OBJ ${images_dir}
        cd ${images_dir}
        zip -r -q obj.zip PRELOADER_OBJ BOOTLOADER_OBJ
        rm -rf PRELOADER_OBJ BOOTLOADER_OBJ
        cd $CURRPATH
    else
        show_vir "ERROR: Failed to get PRELOADER_OBJ & BOOTLOADER_OBJ!!!"
        return 1
    fi

    #copy_otapackage ${images_dir} ${target_product}
    copy_target_files ${images_dir} ${target_product}
    copy_ota_tools ${images_dir}

    local MTK_SEC_BOOT=$(cat ${images_dir}/${preloader_target_product}.mk | grep ^MTK_SEC_BOOT | awk -F '=' '{print $2}')
    local MTK_SEC_USBDL=$(cat ${images_dir}/${preloader_target_product}.mk | grep ^MTK_SEC_USBDL | awk -F '=' '{print $2}')
    #local MTK_SEC_MODEM_AUTH=$(cat ${images_dir}/${preloader_target_product}.mk | grep ^MTK_SEC_MODEM_AUTH | awk '{print $3}' | awk -F '-' '{print $1}')
    #local MTK_SEC_MODEM_ENCODE=$(cat ${images_dir}/${preloader_target_product}.mk | grep ^MTK_SEC_MODEM_ENCODE | awk '{print $3}' | awk -F '-' '{print $1}')

    #echo "MTK_SEC_BOOT = $MTK_SEC_BOOT"
    #echo "MTK_SEC_USBDL = $MTK_SEC_USBDL"
    #echo "MTK_SEC_MODEM_AUTH = $MTK_SEC_MODEM_AUTH"
    #echo "MTK_SEC_MODEM_ENCODE = $MTK_SEC_MODEM_ENCODE"
    if [ ${MTK_SEC_BOOT} == ATTR_SBOOT_ENABLE ] && [ ${MTK_SEC_USBDL} == ATTR_SUSBDL_ENABLE ]; then
        echo "===================================="
        echo "These are secure boot images!!"
        echo "           __   ___  ___     "
        echo "          |    |    |        "
        echo "These are |__  |___ |    images    "
        echo "             | |    |        "
        echo "          _ _| |___ |___     "
        echo "===================================="
    else
        echo "==============================================="
        echo "These are no secure boot images!!"
        echo "           __   __    __   ___  ___    "
        echo "          |  | |  |  |    |    |       "
        echo "These are |  | |  |  |__  |___ |     images    "
        echo "          |  | |  |     | |    |       "
        echo "          |  | |__|  _ _| |___ |___    "
        echo "=============================================="
    fi

    # To make YunOS recovery prebuilts
    if [ -f ./bootable/recovery/collect_recovery.sh ];then
        echo "TO make YunOS recovery prebuilts!!"
        ./bootable/recovery/collect_recovery.sh \
            -i out/target/product/${target_product}/recovery/root \
            -o ${images_dir} \
            -c MTK
    fi

    return 0
}

if [ -n "$1" ]; then
    PRODUCT_NAME=$1
elif [ -f out/projectName.txt ]; then
    PRODUCT_NAME=`cat out/projectName.txt`
else
    echo "ERROR: out/platform.txt not exist, please input target product name"
    echo "usage: $0 [target product name]"
    exit 1
fi

copy_images ${PRODUCT_NAME}
